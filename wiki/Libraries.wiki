#summary Library interface description

= Introduction =
Project contains compiled libraries (in demos projects for Windows and Linux)

=Objects=
There are 3 types ob object available:
<dl>
  <dt>server</dt>
  <dd>Server listening for incoming connections.</dd>
  <dt>server connection</dt>
  <dd>WebSocket connection on server side.</dd>
  <dt>client connection</dt>
  <dd>WebSocket connection on client side.</dd>
</dl>

If you want to create WebSocket server, you will work with *server* and *server connection* objects. Each server is than have it's own list of server connections.

If you want to create WebSocket connection to connect to remote server, you will work with *client connection* objects.

Every object has it's own index. The index is incrementing globally = the object index is unique across all types of objects.


= Types =

{{{
  {:callback for WebSocket connection event, triggered when data are recevied
    @param integer Connection Connection index
    @param pChar aData Received data
  }
  TConnectionDataLib = procedure(Connection: integer; aData: pChar); stdcall;

  {:callback for WebSocket connection custom events 
    @param integer Connection Connection index
  }
  TConnectionEventLib = procedure(Connection: Integer); stdcall;



  {:callback trigger after connection is added to server 
    @param integer Server Server index 
    @param integer aConnection Connection index
  }
  TServerAfterAddConnectionLib = procedure (Server: integer; aConnection: integer); stdcall;

  {:callback trigger before connection is added to server
    @param integer Server Server index 
    @param integer aConnection Connection index
    @param bool CanAdd If true, connection can be added. If false, connection is closed
  }
  TServerBeforeAddConnectionLib = procedure (Server: integer; aConnection: integer; var CanAdd: boolean); stdcall;

  {:callback trigger after connection is removed from server
    @param integer Server Server index 
    @param integer aConnection Connection index
  }
  TServerAfterRemoveConnectionLib = procedure (Server: integer; aConnection: integer); stdcall;

  {:callback trigger before connection is removed from server 
    @param integer Server Server index 
    @param integer aConnection Connection index
  }
  TServerBeforeRemoveConnectionLib = procedure (Server: integer; aConnection: integer); stdcall;

  {:callback trigger on server's socker error
    @param integer Server Server index 
    @param integer Error Socket error
    @param pChar ErrorDescr Socket error description
  }
  TServerSocketErrorLib = procedure (Server: integer; Error: integer; ErrorDescr: pChar); stdcall;



  {:library client intialize function with callbacks}
  TLibraryInitClient = procedure(
    aCcc: TConnectionEventLib; //client connection onconnect
    aCcd: TConnectionDataLib; //client connection ondata
    aCcx: TConnectionEventLib; //client connection ondisconnect
    aCch: TConnectionEventLib; //client connection onhandshake
    aCcr: TConnectionEventLib; //client connection onreaddata
    aCcs: TConnectionEventLib; //client connection onsenddata
    aCci: TConnectionDataLib //client connection info

  ); stdcall;

  {:library server intialize function with callbacks}
  TLibraryInitServer = procedure(
    aSaac: TServerAfterAddConnectionLib;
    aSbac: TServerBeforeAddConnectionLib;
    aSarc: TServerAfterRemoveConnectionLib;
    aSbrc: TServerBeforeRemoveConnectionLib;
    aSse: TServerSocketErrorLib;

    aScd: TConnectionDataLib; //server connection ondata
    aSch: TConnectionEventLib; //server connection onhandshake
    aScr: TConnectionEventLib; //server connection onreaddata
    aScs: TConnectionEventLib; //server connection onsenddata
    aSci: TConnectionDataLib //server connection info
  ); stdcall;


  {:library close function}
  TLibraryClose = procedure;


  {:library function to broadcast data to all connections}
  TServerBroadcast = function (aIndex: integer; aData: pChar): boolean; stdcall;
  {:library function to close server}
  TServerClose = function(aIndex: integer): boolean; stdcall;
  {:library function to create server}
  TServerCreate = function(aBind: pChar; aPort: pChar; aMaxConnections: integer): integer; stdcall;
  {:library function start server}
  TStartServer = function (aIndex: integer): boolean; stdcall;


  {:library function to close connection}
  TServerConnectionClose = function(aIndex: integer): boolean; stdcall;
  {:library function to close connection}
  TServerConnectionInfo = function(aIndex: integer): boolean; stdcall;
  {:library function to send data to connection}
  TServerConnectionSendData = function(aIndex: integer; aData: pChar): boolean; stdcall;


  {:library function to close connection}
  TClientConnectionClose = function(aIndex: integer): boolean; stdcall;
  {:library function to close connection}
  TClientConnectionInfo = function(aIndex: integer): boolean; stdcall;
  {:library function to open connection}
  TClientConnectionOpen = function(aOrigin, aHost, aPort, aResource, aProtocol: pChar; 
     aWebSocketType: integer): integer; stdcall;
  {:library function to send data to connection}
  TClientConnectionSendData = function(aIndex: integer; aData: pChar): boolean; stdcall;

}}}